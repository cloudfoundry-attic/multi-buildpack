// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/cloudfoundry/libbuildpack/logger.go

package main_test

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerRecorder
}

// Recorder for MockLogger (not exported)
type _MockLoggerRecorder struct {
	mock *MockLogger
}

func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &_MockLoggerRecorder{mock}
	return mock
}

func (_m *MockLogger) EXPECT() *_MockLoggerRecorder {
	return _m.recorder
}

func (_m *MockLogger) Info(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

func (_mr *_MockLoggerRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Info", _s...)
}

func (_m *MockLogger) Warning(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Warning", _s...)
}

func (_mr *_MockLoggerRecorder) Warning(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Warning", _s...)
}

func (_m *MockLogger) Error(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Error", _s...)
}

func (_mr *_MockLoggerRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error", _s...)
}

func (_m *MockLogger) BeginStep(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "BeginStep", _s...)
}

func (_mr *_MockLoggerRecorder) BeginStep(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginStep", _s...)
}

func (_m *MockLogger) Debug(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Debug", _s...)
}

func (_mr *_MockLoggerRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Debug", _s...)
}

func (_m *MockLogger) Protip(tip string, help_url string) {
	_m.ctrl.Call(_m, "Protip", tip, help_url)
}

func (_mr *_MockLoggerRecorder) Protip(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Protip", arg0, arg1)
}

func (_m *MockLogger) GetOutput() io.Writer {
	ret := _m.ctrl.Call(_m, "GetOutput")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

func (_mr *_MockLoggerRecorder) GetOutput() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOutput")
}

func (_m *MockLogger) SetOutput(w io.Writer) {
	_m.ctrl.Call(_m, "SetOutput", w)
}

func (_mr *_MockLoggerRecorder) SetOutput(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOutput", arg0)
}
