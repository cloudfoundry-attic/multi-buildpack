// This file was generated by counterfeiter
package cacheddownloaderfakes

import (
	"io"
	"net/url"
	"sync"

	"code.cloudfoundry.org/cacheddownloader"
	"code.cloudfoundry.org/lager"
)

type FakeCachedDownloader struct {
	FetchStub        func(logger lager.Logger, urlToFetch *url.URL, cacheKey string, checksum cacheddownloader.ChecksumInfoType, cancelChan <-chan struct{}) (stream io.ReadCloser, size int64, err error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		logger     lager.Logger
		urlToFetch *url.URL
		cacheKey   string
		checksum   cacheddownloader.ChecksumInfoType
		cancelChan <-chan struct{}
	}
	fetchReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	FetchAsDirectoryStub        func(logger lager.Logger, urlToFetch *url.URL, cacheKey string, checksum cacheddownloader.ChecksumInfoType, cancelChan <-chan struct{}) (dirPath string, size int64, err error)
	fetchAsDirectoryMutex       sync.RWMutex
	fetchAsDirectoryArgsForCall []struct {
		logger     lager.Logger
		urlToFetch *url.URL
		cacheKey   string
		checksum   cacheddownloader.ChecksumInfoType
		cancelChan <-chan struct{}
	}
	fetchAsDirectoryReturns struct {
		result1 string
		result2 int64
		result3 error
	}
	CloseDirectoryStub        func(logger lager.Logger, cacheKey, directoryPath string) error
	closeDirectoryMutex       sync.RWMutex
	closeDirectoryArgsForCall []struct {
		logger        lager.Logger
		cacheKey      string
		directoryPath string
	}
	closeDirectoryReturns struct {
		result1 error
	}
	SaveStateStub        func(logger lager.Logger) error
	saveStateMutex       sync.RWMutex
	saveStateArgsForCall []struct {
		logger lager.Logger
	}
	saveStateReturns struct {
		result1 error
	}
	RecoverStateStub        func(logger lager.Logger) error
	recoverStateMutex       sync.RWMutex
	recoverStateArgsForCall []struct {
		logger lager.Logger
	}
	recoverStateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCachedDownloader) Fetch(logger lager.Logger, urlToFetch *url.URL, cacheKey string, checksum cacheddownloader.ChecksumInfoType, cancelChan <-chan struct{}) (stream io.ReadCloser, size int64, err error) {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		logger     lager.Logger
		urlToFetch *url.URL
		cacheKey   string
		checksum   cacheddownloader.ChecksumInfoType
		cancelChan <-chan struct{}
	}{logger, urlToFetch, cacheKey, checksum, cancelChan})
	fake.recordInvocation("Fetch", []interface{}{logger, urlToFetch, cacheKey, checksum, cancelChan})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(logger, urlToFetch, cacheKey, checksum, cancelChan)
	} else {
		return fake.fetchReturns.result1, fake.fetchReturns.result2, fake.fetchReturns.result3
	}
}

func (fake *FakeCachedDownloader) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeCachedDownloader) FetchArgsForCall(i int) (lager.Logger, *url.URL, string, cacheddownloader.ChecksumInfoType, <-chan struct{}) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].logger, fake.fetchArgsForCall[i].urlToFetch, fake.fetchArgsForCall[i].cacheKey, fake.fetchArgsForCall[i].checksum, fake.fetchArgsForCall[i].cancelChan
}

func (fake *FakeCachedDownloader) FetchReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCachedDownloader) FetchAsDirectory(logger lager.Logger, urlToFetch *url.URL, cacheKey string, checksum cacheddownloader.ChecksumInfoType, cancelChan <-chan struct{}) (dirPath string, size int64, err error) {
	fake.fetchAsDirectoryMutex.Lock()
	fake.fetchAsDirectoryArgsForCall = append(fake.fetchAsDirectoryArgsForCall, struct {
		logger     lager.Logger
		urlToFetch *url.URL
		cacheKey   string
		checksum   cacheddownloader.ChecksumInfoType
		cancelChan <-chan struct{}
	}{logger, urlToFetch, cacheKey, checksum, cancelChan})
	fake.recordInvocation("FetchAsDirectory", []interface{}{logger, urlToFetch, cacheKey, checksum, cancelChan})
	fake.fetchAsDirectoryMutex.Unlock()
	if fake.FetchAsDirectoryStub != nil {
		return fake.FetchAsDirectoryStub(logger, urlToFetch, cacheKey, checksum, cancelChan)
	} else {
		return fake.fetchAsDirectoryReturns.result1, fake.fetchAsDirectoryReturns.result2, fake.fetchAsDirectoryReturns.result3
	}
}

func (fake *FakeCachedDownloader) FetchAsDirectoryCallCount() int {
	fake.fetchAsDirectoryMutex.RLock()
	defer fake.fetchAsDirectoryMutex.RUnlock()
	return len(fake.fetchAsDirectoryArgsForCall)
}

func (fake *FakeCachedDownloader) FetchAsDirectoryArgsForCall(i int) (lager.Logger, *url.URL, string, cacheddownloader.ChecksumInfoType, <-chan struct{}) {
	fake.fetchAsDirectoryMutex.RLock()
	defer fake.fetchAsDirectoryMutex.RUnlock()
	return fake.fetchAsDirectoryArgsForCall[i].logger, fake.fetchAsDirectoryArgsForCall[i].urlToFetch, fake.fetchAsDirectoryArgsForCall[i].cacheKey, fake.fetchAsDirectoryArgsForCall[i].checksum, fake.fetchAsDirectoryArgsForCall[i].cancelChan
}

func (fake *FakeCachedDownloader) FetchAsDirectoryReturns(result1 string, result2 int64, result3 error) {
	fake.FetchAsDirectoryStub = nil
	fake.fetchAsDirectoryReturns = struct {
		result1 string
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCachedDownloader) CloseDirectory(logger lager.Logger, cacheKey string, directoryPath string) error {
	fake.closeDirectoryMutex.Lock()
	fake.closeDirectoryArgsForCall = append(fake.closeDirectoryArgsForCall, struct {
		logger        lager.Logger
		cacheKey      string
		directoryPath string
	}{logger, cacheKey, directoryPath})
	fake.recordInvocation("CloseDirectory", []interface{}{logger, cacheKey, directoryPath})
	fake.closeDirectoryMutex.Unlock()
	if fake.CloseDirectoryStub != nil {
		return fake.CloseDirectoryStub(logger, cacheKey, directoryPath)
	} else {
		return fake.closeDirectoryReturns.result1
	}
}

func (fake *FakeCachedDownloader) CloseDirectoryCallCount() int {
	fake.closeDirectoryMutex.RLock()
	defer fake.closeDirectoryMutex.RUnlock()
	return len(fake.closeDirectoryArgsForCall)
}

func (fake *FakeCachedDownloader) CloseDirectoryArgsForCall(i int) (lager.Logger, string, string) {
	fake.closeDirectoryMutex.RLock()
	defer fake.closeDirectoryMutex.RUnlock()
	return fake.closeDirectoryArgsForCall[i].logger, fake.closeDirectoryArgsForCall[i].cacheKey, fake.closeDirectoryArgsForCall[i].directoryPath
}

func (fake *FakeCachedDownloader) CloseDirectoryReturns(result1 error) {
	fake.CloseDirectoryStub = nil
	fake.closeDirectoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedDownloader) SaveState(logger lager.Logger) error {
	fake.saveStateMutex.Lock()
	fake.saveStateArgsForCall = append(fake.saveStateArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("SaveState", []interface{}{logger})
	fake.saveStateMutex.Unlock()
	if fake.SaveStateStub != nil {
		return fake.SaveStateStub(logger)
	} else {
		return fake.saveStateReturns.result1
	}
}

func (fake *FakeCachedDownloader) SaveStateCallCount() int {
	fake.saveStateMutex.RLock()
	defer fake.saveStateMutex.RUnlock()
	return len(fake.saveStateArgsForCall)
}

func (fake *FakeCachedDownloader) SaveStateArgsForCall(i int) lager.Logger {
	fake.saveStateMutex.RLock()
	defer fake.saveStateMutex.RUnlock()
	return fake.saveStateArgsForCall[i].logger
}

func (fake *FakeCachedDownloader) SaveStateReturns(result1 error) {
	fake.SaveStateStub = nil
	fake.saveStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedDownloader) RecoverState(logger lager.Logger) error {
	fake.recoverStateMutex.Lock()
	fake.recoverStateArgsForCall = append(fake.recoverStateArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("RecoverState", []interface{}{logger})
	fake.recoverStateMutex.Unlock()
	if fake.RecoverStateStub != nil {
		return fake.RecoverStateStub(logger)
	} else {
		return fake.recoverStateReturns.result1
	}
}

func (fake *FakeCachedDownloader) RecoverStateCallCount() int {
	fake.recoverStateMutex.RLock()
	defer fake.recoverStateMutex.RUnlock()
	return len(fake.recoverStateArgsForCall)
}

func (fake *FakeCachedDownloader) RecoverStateArgsForCall(i int) lager.Logger {
	fake.recoverStateMutex.RLock()
	defer fake.recoverStateMutex.RUnlock()
	return fake.recoverStateArgsForCall[i].logger
}

func (fake *FakeCachedDownloader) RecoverStateReturns(result1 error) {
	fake.RecoverStateStub = nil
	fake.recoverStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedDownloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.fetchAsDirectoryMutex.RLock()
	defer fake.fetchAsDirectoryMutex.RUnlock()
	fake.closeDirectoryMutex.RLock()
	defer fake.closeDirectoryMutex.RUnlock()
	fake.saveStateMutex.RLock()
	defer fake.saveStateMutex.RUnlock()
	fake.recoverStateMutex.RLock()
	defer fake.recoverStateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCachedDownloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cacheddownloader.CachedDownloader = new(FakeCachedDownloader)
