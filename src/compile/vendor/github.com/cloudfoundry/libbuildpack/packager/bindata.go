// Code generated by go-bindata.
// sources:
// scaffold/.envrc
// scaffold/.gitignore
// scaffold/README.md
// scaffold/VERSION
// scaffold/bin/compile
// scaffold/bin/detect
// scaffold/bin/finalize
// scaffold/bin/release
// scaffold/bin/supply
// scaffold/fixtures/.gitkeep
// scaffold/fixtures/brats/.gitkeep
// scaffold/fixtures/simple_test/some_file.txt
// scaffold/manifest.yml
// scaffold/scripts/brats.sh
// scaffold/scripts/build.sh
// scaffold/scripts/install_go.sh
// scaffold/scripts/install_tools.sh
// scaffold/scripts/integration.sh
// scaffold/scripts/unit.sh
// scaffold/src/LANGUAGE/Gopkg.toml
// scaffold/src/LANGUAGE/brats/brats_suite_test.go
// scaffold/src/LANGUAGE/brats/brats_test.go
// scaffold/src/LANGUAGE/finalize/cli/cli_suite_test.go
// scaffold/src/LANGUAGE/finalize/cli/main.go
// scaffold/src/LANGUAGE/finalize/finalize.go
// scaffold/src/LANGUAGE/finalize/finalize_suite_test.go
// scaffold/src/LANGUAGE/finalize/finalize_test.go
// scaffold/src/LANGUAGE/hooks/hooks_suite_test.go
// scaffold/src/LANGUAGE/integration/integration_suite_test.go
// scaffold/src/LANGUAGE/integration/simple_test.go
// scaffold/src/LANGUAGE/supply/cli/cli_suite_test.go
// scaffold/src/LANGUAGE/supply/cli/main.go
// scaffold/src/LANGUAGE/supply/supply.go
// scaffold/src/LANGUAGE/supply/supply_suite_test.go
// scaffold/src/LANGUAGE/supply/supply_test.go
// scaffold/src/LANGUAGE/vendor/.gitkeep
// DO NOT EDIT!

package packager

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Envrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x70\xf7\x0f\x70\x0c\xf1\xb0\x55\x09\x08\x77\xe1\x82\x0b\x39\x79\xfa\x81\x45\xf4\xf5\x92\x32\xf3\x60\xc2\x10\x75\x60\x49\x2b\x15\x10\x07\x10\x00\x00\xff\xff\x4b\xa8\xfe\x63\x42\x00\x00\x00")

func EnvrcBytes() ([]byte, error) {
	return bindataRead(
		_Envrc,
		".envrc",
	)
}

func Envrc() (*asset, error) {
	bytes, err := EnvrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".envrc", size: 66, mode: os.FileMode(436), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xc8\x4e\xe7\xd2\x4b\xca\xcc\xe3\x2a\x4e\x4e\x4c\x4b\xcb\xcf\x49\x89\x4f\x2a\xcd\xcc\x49\x29\x48\x4c\xce\xd6\xd5\xd2\xab\xca\x2c\x00\x04\x00\x00\xff\xff\x8b\xdd\xc0\x96\x21\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 33, mode: os.FileMode(436), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\xe8\x61\x2b\xd0\xda\xe8\xb5\xb7\x7e\x6e\xc1\xda\xad\xe8\x92\xcb\x82\x22\x95\x65\x3a\xd6\x2a\x8b\x82\x28\x35\xf3\xbf\x1f\x28\x77\x4e\xd2\xf6\xb6\xc3\xb0\x8b\xa1\x0f\x3e\x8a\xef\xf1\xd1\x07\x07\x07\x70\x9e\x8c\x6d\xbc\xd2\x4f\xb0\x60\x0c\x70\x49\x3a\xf5\xe8\xa2\x8a\x86\x5c\x51\x4c\x11\xc6\xad\x21\x76\xb8\x0d\x2f\xe6\x04\xb5\x6c\x20\x76\x86\xc7\xa5\x9c\x1f\x41\x48\x2e\x87\xb6\x64\x2d\x6d\x04\xa8\xa9\xef\x95\x6b\xa0\x0d\xd4\xe7\xab\x29\xfa\x03\x43\x63\x02\xea\x48\x61\x38\x2d\x8a\x93\x12\xbe\x53\x0a\x1a\x73\x54\x89\xee\x39\x68\x68\x8d\x45\x30\x6e\x1f\xb8\x85\x95\xc5\xe3\xe3\x63\xad\xb8\x2b\x78\x84\x8e\x30\x39\x95\x1a\xd9\xf4\xde\x9a\x76\xc8\x70\x1f\x48\x23\xf3\x9f\x6c\x6d\x8a\x29\xe0\x11\x18\xc7\x51\x59\x0b\x4b\x49\xea\x9e\x1f\x3e\x76\x31\x7a\x3e\xad\xaa\x71\x5f\x3a\x8c\xd5\x21\x6c\x3a\xa3\x3b\xd8\x18\x6b\x41\xa5\x48\xbd\x8a\x46\x2b\x6b\x07\xd8\x7b\x17\x36\x1d\x3a\x18\x28\x81\xee\x94\x5b\xe3\x54\xa8\x41\x2e\x33\xc3\xd9\xcb\x6b\x13\x97\x63\xf9\xa8\x35\x86\x89\x49\x59\xb1\x0e\xc6\x47\xae\x5e\x4a\x5b\x45\x22\xcb\x25\x77\x99\x96\x64\x39\x7f\xd1\x7e\x47\x93\x09\xfe\x36\xf3\x18\x34\x81\x17\x9c\x15\xbd\xb0\x94\x1a\xb8\xa6\xe4\x9a\x30\x14\x0b\x6f\x49\xbd\x4a\x09\x91\x84\x4b\xd8\x0f\x05\x69\x26\x79\xb1\xc8\x28\x80\x47\x2d\x12\x9b\x08\xf5\x00\x4e\xf5\x58\x4c\xb5\xe8\x16\x74\x40\x15\xf1\x78\x9b\x74\x79\xbe\x98\xdd\x5c\xde\x9d\x5d\x7c\x59\x7d\x3d\xbb\xbd\x7a\xd8\x3d\xf8\x31\xbb\x5b\x5d\xcf\x6e\xae\x56\x77\x67\xf3\xcf\x0f\x70\x22\x09\x7c\xe2\x0e\xfa\x61\xa5\xbc\x87\xe5\x71\x0d\xaf\xe0\x23\x2d\xb1\xea\x1c\x39\x1a\xb7\x2e\x26\x97\x32\x24\x1e\xcd\xb4\xbc\x48\xd1\x2a\xe6\x6d\x73\xd7\x26\x76\xa9\x2e\x35\xf5\x95\x16\x76\xed\x48\xae\xb2\xa6\x9e\x4a\xad\xf4\x88\x3a\x84\x36\xa8\x1e\x37\x14\x9e\xa0\xa5\x20\x1e\x77\xe2\x6c\xe3\x22\xae\x43\x1e\x16\x88\xc8\x51\x5a\x3c\xa7\xbc\xfc\xf7\x73\xf1\xbf\x0d\xc6\x7d\x72\x90\x9c\x89\xa3\x92\xc5\x3b\xd3\x20\xb7\xbb\x43\x20\x88\x37\x2d\x78\x0f\xb8\x13\x34\xe1\x6f\x29\x88\x7e\x2d\x85\x7e\x44\x6b\xe5\xa0\x96\xfe\x24\xb1\xb7\x83\x4f\xd9\x20\xb0\xd4\x7f\xe5\x9c\x72\xb4\xe6\x3d\x7a\x0a\x62\x4e\x98\x31\x27\xe4\xe2\x9b\x47\x07\xca\x81\x91\xad\x3c\x97\xfd\xe2\x03\xfd\x44\x1d\x05\x03\x97\x86\xb5\x55\xa6\xc7\x50\xcc\xf7\xbc\x04\x86\x01\x7f\x79\x0c\x26\xff\xaa\x6d\x9e\x47\x47\x11\x06\x8c\x59\x0f\xd7\x60\x93\x7d\xea\x03\x35\x49\x67\x76\x89\xb1\x2c\x7e\x07\x00\x00\xff\xff\x60\xcc\xda\x0b\xf2\x05\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 1522, mode: os.FileMode(436), modTime: time.Unix(1519142749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _version = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\xd0\x33\xd0\x33\x00\x04\x00\x00\xff\xff\x86\x4b\x5b\x2e\x05\x00\x00\x00")

func versionBytes() ([]byte, error) {
	return bindataRead(
		_version,
		"VERSION",
	)
}

func version() (*asset, error) {
	bytes, err := versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "VERSION", size: 5, mode: os.FileMode(436), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binCompile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binCompileBytes() ([]byte, error) {
	return bindataRead(
		_binCompile,
		"bin/compile",
	)
}

func binCompile() (*asset, error) {
	bytes, err := binCompileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/compile", size: 0, mode: os.FileMode(509), modTime: time.Unix(1519140838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binDetect = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\xc8\x2c\x51\x30\x04\x04\x00\x00\xff\xff\xd9\xc8\xd5\xf1\x06\x00\x00\x00")

func binDetectBytes() ([]byte, error) {
	return bindataRead(
		_binDetect,
		"bin/detect",
	)
}

func binDetect() (*asset, error) {
	bytes, err := binDetectBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/detect", size: 6, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binFinalize = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x5f\xeb\x9b\x30\x14\x7d\xbf\x9f\xe2\xce\x65\xd0\x0e\x5c\xd8\xbf\x97\x81\x03\xab\xce\xca\xca\x14\xdb\x82\x6f\xd6\x6a\x6a\x43\x6d\x22\x49\x1c\x63\xe2\x77\x1f\xd6\xd6\xad\xe3\x97\xa7\x73\x73\x0f\xe7\x5c\xce\x79\xfd\x8a\x76\x5a\xd1\x23\x17\x94\x89\x9f\x78\x2c\xf4\x19\x34\x33\x68\xb3\x4e\x62\xcb\x5b\x76\x2a\x78\x03\xb0\xda\x47\x1b\x3f\xf7\xa3\xd4\x21\xef\xc1\x73\xbd\x75\x30\x0d\x1f\xc0\x0f\x92\xed\x84\x3f\x4e\x38\xf2\x33\x87\x7c\x82\x24\x8d\xbf\x45\x9b\x3b\xad\xff\xfc\xc5\x1e\x00\xd8\xaf\x56\x2a\x83\x37\xb1\xc4\xf5\xbe\xdf\x96\x87\x8a\x2b\x51\x5c\x19\x92\x85\x62\x45\xd5\x70\x71\x41\xfb\x84\xa4\x5f\xb9\xdb\x75\xbe\x8d\xf7\xa9\x17\xbc\xa1\x6f\x87\xe5\x01\xb4\xec\x54\xc9\xd0\x22\x4f\x0a\x54\x97\x8a\xb7\x46\x53\x2e\xb4\x29\x9a\x26\xaf\xe5\x3b\x7d\xb6\x40\x76\xa6\xed\x4c\x5e\x71\xe5\x90\xc5\xf5\x62\xd8\xb5\x45\xbb\x42\xdb\xe0\x89\x8b\xa2\xe1\xbf\x59\x96\x65\x4b\x00\x56\x9e\x25\x5a\xf6\xf8\xbe\x62\xda\x09\xc1\x45\x8d\xb5\xc4\x63\xc7\x9b\x6a\xe6\x5a\x10\xc6\x69\x1c\xef\x1c\x12\xca\x68\x32\xf2\xb9\xa2\xb5\xc4\x30\x4e\xdc\xdd\xda\x79\x3e\x0a\xff\xa7\xdd\x22\x9e\x55\x6d\x89\xe4\xef\x7d\xf4\x61\x82\x7d\xbf\x71\x7f\x84\x7b\x37\x0c\x86\x61\xfe\xa5\x65\xc3\x01\x5e\xe4\xdf\xa3\x18\x1d\x2d\xb4\xc8\xdc\xcc\x38\x3c\x9a\x99\x71\xe4\x67\x23\xfe\xa7\x19\x0b\xfe\x04\x00\x00\xff\xff\xcd\x3f\x17\x2e\x00\x02\x00\x00")

func binFinalizeBytes() ([]byte, error) {
	return bindataRead(
		_binFinalize,
		"bin/finalize",
	)
}

func binFinalize() (*asset, error) {
	bytes, err := binFinalizeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/finalize", size: 512, mode: os.FileMode(509), modTime: time.Unix(1518728913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binRelease = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x41\xaa\x83\x30\x14\x85\xe1\xb9\xab\x38\x4f\x41\x47\x41\x5e\x87\x52\x5c\x43\x17\x20\xc8\x4d\x72\xc5\x50\x4d\x42\x6e\xd2\xd6\xdd\x97\xda\x0e\xcf\xe0\x3b\x7f\xf3\xd7\x17\x49\xbd\x76\xbe\x67\xff\x80\x26\x59\xab\x06\x9f\x99\x78\x63\x12\xc6\x55\x17\xb7\x59\x65\x5d\x1a\x2b\x36\x6b\x80\x62\xd4\x4a\xa9\xc9\x5b\x5e\xa8\x6c\x79\x8e\x29\x18\x16\x99\xf3\x11\x59\x86\xc9\x03\x4f\xd6\x03\xba\xb1\xbd\xe0\x14\xb7\xef\x93\x44\x36\x6e\x39\x40\xf8\x49\x48\xa6\x94\x61\xc2\xbe\x93\xb7\x58\x42\x42\x5e\x9d\xe0\x2c\x46\x32\x77\xb4\x2d\xf8\xe5\x32\xfe\xbb\xba\x7a\x07\x00\x00\xff\xff\xd1\xa4\x00\x32\xab\x00\x00\x00")

func binReleaseBytes() ([]byte, error) {
	return bindataRead(
		_binRelease,
		"bin/release",
	)
}

func binRelease() (*asset, error) {
	bytes, err := binReleaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/release", size: 171, mode: os.FileMode(509), modTime: time.Unix(1519225088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binSupply = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x5f\x6b\xea\x30\x18\xc6\xef\xf3\x29\xde\x93\x93\x03\x7a\xa0\x27\x9c\x6d\xb7\x1d\xd4\xb6\xd4\x32\x59\xa5\x2a\xf4\xae\xd6\x36\xd6\x60\x4c\x42\xfe\xc0\x86\xf8\xdd\x87\xd6\x39\x1c\xcb\xd5\xf3\x86\x5f\xde\xe7\xc9\xf3\xfb\x17\xdd\x70\x49\x37\x8d\xdd\x21\xcb\x1c\x04\xcc\x2b\xd0\x5c\xb3\x6d\xc3\x05\x42\x93\x55\x3e\x4b\xea\x24\x2f\x43\xf2\x1f\xc5\x51\x3c\x4d\x87\xe1\x01\x25\xe9\x7c\x31\xe8\xc7\x41\xe7\x49\x15\x92\x27\x84\xd8\x9b\x56\xc6\xc1\xe5\xe5\x3c\x8a\x5f\x2e\xd0\xba\xe3\x46\x36\x07\x06\x64\x64\x58\xd3\x09\x2e\xf7\x10\x6c\x81\x1c\x27\xd1\x62\x5a\x2f\x8a\x55\x19\xa7\x7f\xe8\xdf\xd3\x78\x8d\xac\xf2\xa6\x65\x80\xc9\xdd\x06\x6a\x5b\xc3\xb5\xb3\x94\x4b\xeb\x1a\x21\xea\x5e\xfd\xb3\x3b\x8c\x94\x77\xda\xbb\xba\xe3\x26\x24\xa3\xc3\xde\xb1\x83\x86\xa0\x83\xc0\x81\xf5\x5a\x8b\xf7\xaa\xaa\xc6\x88\xb5\x3b\x05\x38\x38\x9f\x67\x28\xbd\x94\x5c\xf6\xd0\x2b\xd8\x78\x2e\xba\x2b\x88\x51\x56\x94\x45\xb1\x0c\x49\xa6\xf2\xc1\x23\xe1\x86\xf6\x0a\xb2\x62\x1e\x2d\xa7\xe1\x7d\x1e\xf8\x8e\x5d\x6a\xbc\xed\x0c\x14\x90\xaf\x68\x74\xb0\x80\xe3\x71\x16\xbd\x66\xab\x28\x4b\x4f\xa7\xeb\x1d\x6d\x05\x47\x3f\xa0\xd7\xef\x9f\xad\x30\x60\x72\xab\xfe\x3c\x7c\x56\x7f\xd3\x79\x52\x61\xf4\x11\x00\x00\xff\xff\xa8\xf1\xe1\xc8\xca\x01\x00\x00")

func binSupplyBytes() ([]byte, error) {
	return bindataRead(
		_binSupply,
		"bin/supply",
	)
}

func binSupply() (*asset, error) {
	bytes, err := binSupplyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/supply", size: 458, mode: os.FileMode(509), modTime: time.Unix(1518728900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func fixturesGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_fixturesGitkeep,
		"fixtures/.gitkeep",
	)
}

func fixturesGitkeep() (*asset, error) {
	bytes, err := fixturesGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/.gitkeep", size: 0, mode: os.FileMode(436), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesBratsGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func fixturesBratsGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_fixturesBratsGitkeep,
		"fixtures/brats/.gitkeep",
	)
}

func fixturesBratsGitkeep() (*asset, error) {
	bytes, err := fixturesBratsGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/brats/.gitkeep", size: 0, mode: os.FileMode(436), modTime: time.Unix(1519227273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesSimple_testSome_fileTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf1\x77\xf1\xb7\x52\x70\xad\x28\xc8\x49\xcc\xcc\x53\x28\xcf\xa8\x54\x28\xc9\xc8\x2c\x56\x48\xcb\xac\x28\x29\x2d\x4a\x55\xc8\x2c\x56\xc8\x48\x2d\x4a\xd5\xe3\xf2\x48\xcd\xc9\xc9\x57\x08\xcf\x2f\xca\x49\xd1\xe3\x02\x04\x00\x00\xff\xff\x50\x76\x66\xa1\x35\x00\x00\x00")

func fixturesSimple_testSome_fileTxtBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSimple_testSome_fileTxt,
		"fixtures/simple_test/some_file.txt",
	)
}

func fixturesSimple_testSome_fileTxt() (*asset, error) {
	bytes, err := fixturesSimple_testSome_fileTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/simple_test/some_file.txt", size: 53, mode: os.FileMode(493), modTime: time.Unix(1519152110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcf\xcd\x4a\xc3\x40\x14\xc5\xf1\xfd\x3c\x45\x5e\x20\xe9\xbe\xbb\x80\xa1\x08\x5a\xa1\xa2\xdb\xe1\x76\xee\x49\xbd\x78\x73\x33\xcc\x87\x10\x4b\xdf\x5d\x1a\x21\xba\x3b\x3f\xfe\xab\xd3\xb6\xad\x53\xb2\x4b\xa5\x0b\xf6\xcd\xf5\xfa\xd4\x1f\x0f\x6f\xfd\x61\xb8\xdd\x1c\x63\xa4\xaa\xc5\x7f\x21\x65\x99\x2d\xef\x1d\x23\xc2\x18\x16\x16\xcf\x88\x09\x81\x8a\xcc\xe6\x99\x0a\xfe\x57\xb9\xcb\x89\x05\xad\x0c\x3f\x8a\xde\xdd\x34\x6d\x73\x1a\xfa\x87\xe7\xa1\x9b\x78\xd5\xfb\x70\x7a\x7d\x7c\x39\xae\xfb\x2c\xb6\x63\x14\x84\xb2\x31\xcc\x53\x14\xc5\xe6\x5c\x63\xd4\x65\xe3\x28\x46\x2a\xdf\x7f\x3d\x41\x41\xf9\xd7\x13\x99\x8c\xc8\xa5\x5b\x26\x75\x31\xc1\x47\x0a\x9f\xeb\xc3\x1c\x92\xc4\x92\x77\xe7\x2a\xca\x5d\xfe\x70\x3f\x01\x00\x00\xff\xff\xc6\x78\x7d\xc3\x01\x01\x00\x00")

func manifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_manifestYml,
		"manifest.yml",
	)
}

func manifestYml() (*asset, error) {
	bytes, err := manifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifest.yml", size: 257, mode: os.FileMode(436), modTime: time.Unix(1519157572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBratsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x4f\x4b\xfb\x30\x18\xc7\xef\x79\x15\xcf\x2f\xbf\x1e\x54\x48\xa3\x78\x1b\xec\xd0\xe9\x98\x22\x6e\xb2\xd5\x93\x48\x49\xd3\x67\x6b\x68\x9a\x84\x3c\xc9\x2e\xa3\xef\x5d\x10\x06\xc5\xe3\xf7\x0f\x7c\x3e\xff\xff\xc9\x4c\x51\xb6\xc6\x49\x74\x67\x68\x15\xf5\x8c\x30\x81\xc0\xec\x21\x98\x80\x47\x65\x2c\x63\xba\x03\x5e\xdc\x40\x67\xa2\x53\x23\x02\x2f\x2e\xab\xea\xf0\xd2\x1c\x76\x9f\xfb\xa7\xf5\xd7\xfd\xf7\xc4\xe1\x56\x96\x25\x67\xe4\x73\xd4\x08\x25\xba\x73\xd4\xac\x94\xa4\xa3\x09\x89\xa4\x71\x94\x94\xb5\x4d\xf2\xde\x52\x49\x3d\x63\x9b\xd7\xed\xdb\x66\xd7\x6c\x77\xcf\xeb\xc3\xb2\xb8\xcc\xe3\x42\x3c\x4e\xd7\xbd\xaa\xeb\xf5\xfb\x47\x3d\xbb\x5c\x9b\x85\x78\x98\x7e\xcd\x28\x6a\x79\x27\xdb\xa8\x12\x31\x86\xba\xf7\xc0\xf7\xd9\xc1\x2a\x1b\xdb\x05\xa5\x07\xd8\x67\x97\xcc\x88\x50\x69\x8d\x21\x29\xa7\x11\x6a\xa4\x44\x9c\x9d\x8c\x1b\x4e\x1e\x44\x04\x21\x8e\x56\x0d\x58\xa5\x84\x63\x48\xb4\x2c\xfe\xd0\x40\x38\xdf\x21\x41\x31\x17\xfd\x09\x00\x00\xff\xff\x66\xe8\xeb\x84\x3e\x01\x00\x00")

func scriptsBratsShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBratsSh,
		"scripts/brats.sh",
	)
}

func scriptsBratsSh() (*asset, error) {
	bytes, err := scriptsBratsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/brats.sh", size: 318, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBuildSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4a\xc5\x30\x14\x80\xe1\x3d\x4f\x71\x8c\x77\xd0\x21\x8d\x2f\x70\x87\x2a\xa5\x0e\x62\xc1\xd2\x49\x44\xd2\xe4\xb4\x1e\x38\x26\x21\x31\xb5\x5a\xfa\xee\xa2\xe8\xe0\x78\xd7\x7f\xf8\xf8\xcf\xcf\x74\xc9\x49\x8f\xe4\x35\xfa\x05\x46\x93\x5f\x44\xc6\x37\x50\xb8\x96\x00\x91\x22\x4e\x86\x58\x08\xeb\x40\x1e\x2e\xc0\x51\xf2\xe6\x15\x41\x1e\xb6\xeb\xba\xbf\x7d\xee\xbb\xe1\xe1\xa6\x79\xbc\x7a\xda\x25\x5c\xea\xaa\x92\x22\x87\x92\x2c\x42\x85\x7e\x49\x56\x88\xb6\xeb\xfa\x23\x93\x2f\x2b\xcc\x01\xc6\x42\xec\x40\xb1\x9b\xd8\xcc\xf9\x28\x55\x06\xf5\x2e\x41\x05\xf8\x1e\xc8\x25\x46\xfe\x80\x6d\xbb\xab\xef\xdb\xa1\x6e\x9b\x7d\xff\x6d\xda\x32\x9d\x44\x4d\xe4\x0d\xd3\x27\xfe\xc7\xfe\xea\x0f\xf7\x15\x00\x00\xff\xff\x09\x7c\x6d\x88\xfa\x00\x00\x00")

func scriptsBuildShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBuildSh,
		"scripts/build.sh",
	)
}

func scriptsBuildSh() (*asset, error) {
	bytes, err := scriptsBuildShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/build.sh", size: 250, mode: os.FileMode(509), modTime: time.Unix(1518728879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsInstall_goSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xef\x6b\xdb\x30\x14\xfc\xae\xbf\xe2\xe2\x19\xba\x05\x64\xc7\x5d\xdc\xfc\x18\x19\x8c\xba\x94\x42\x5a\x83\x47\xb7\x0f\xa5\x0c\xd9\x92\x6d\x51\xd9\x32\xb2\xcc\x92\x6e\xfd\xdf\x87\x93\x65\x49\x0d\x83\xbe\x4f\x82\x77\xef\xbd\xbb\xd3\xbd\x1b\xf9\xa9\xac\xfd\x94\xb5\x25\x69\x85\x05\x15\x9d\x46\x23\x1b\x91\x33\xa9\x08\xb9\x8e\x7f\x7c\xbb\x4a\xbe\xde\xc4\x77\x2b\x27\xf0\x16\x5e\xe0\x10\xb1\x69\xb4\xb1\xb8\xd6\x37\x75\x6b\x99\x52\x91\x34\x2b\xc7\xb7\x55\xe3\x17\xda\x3d\xe2\x1d\x52\x3d\x71\x69\x40\x1b\xb8\xa7\x58\x42\x64\x8e\x07\x8c\x40\xf3\xd7\x0d\xbf\xd0\x3b\x2a\x85\xc6\xe3\x27\xd8\x52\xd4\xfd\xf5\xdb\x28\x5c\x39\x93\x70\x16\xcc\xe7\x17\x62\x91\x2e\x52\x36\x99\xcd\x66\x1f\xd3\x70\x7a\xce\x82\x40\x2c\xe6\xe1\x82\x4d\x1d\x72\x9f\xac\x57\xa5\xb5\x4d\xbb\xf4\xfd\xb4\x93\x8a\x37\x2c\x7b\x6a\xbd\x4c\xe9\x8e\xe7\xba\xab\xb9\xd9\x7a\xda\x14\x3e\x17\x8d\xa8\xb9\xa8\x33\x29\xda\xfe\x60\xa1\xdd\x5f\x47\xce\x2f\x9e\x92\x75\xb7\xa1\xac\xe2\x17\x53\xba\xeb\xdc\x46\xe1\x72\xb2\x9c\xbf\x78\x96\x19\xaf\x78\x26\x44\x64\xa5\x86\x43\xfb\xfa\x8c\x48\xff\xac\x95\x66\x1c\x85\xc6\xab\x45\x0e\xc9\x3a\xa3\x40\x5b\xd0\x35\x28\x35\xc2\x9a\x2d\x82\xf0\xf0\xa4\x5c\x28\xb6\xc5\x39\xdc\xfb\x64\x0d\xaa\xf1\xd7\xbf\x7f\x57\xa2\xf8\xfb\xdd\x3a\xfe\x12\xed\xf4\xbb\xef\x2b\x1e\xb6\x5d\x35\x40\xe1\x37\xb2\xce\x82\x72\x9c\xe1\xac\xb7\x33\xf8\xb0\xf3\xf6\x01\xee\xe9\x38\x46\x2b\xb8\x7b\x25\x78\x3c\x38\xbb\x57\x81\x7d\x8d\xc7\x57\x49\x12\x27\xe3\x31\x7a\x4c\x25\xdb\x8a\xd9\xac\x5c\xa2\xd0\x76\xb0\x4a\x6c\x1a\x91\x59\xc1\x0f\x0b\xfb\x34\x48\x8b\x80\xe4\x92\x10\xcb\x0c\x36\xcf\xf9\x90\x25\xbd\x1c\x04\xc0\x0c\x85\xf4\xd3\x6f\x0f\xc5\x7f\xa8\x5f\xea\x4e\x71\xd4\xda\x82\x1f\x3f\xe5\x84\xdf\x9f\x00\x00\x00\xff\xff\x59\xa9\xe5\x13\xe9\x02\x00\x00")

func scriptsInstall_goShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsInstall_goSh,
		"scripts/install_go.sh",
	)
}

func scriptsInstall_goSh() (*asset, error) {
	bytes, err := scriptsInstall_goShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/install_go.sh", size: 745, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsInstall_toolsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x4f\x4b\x03\x31\x10\x05\xf0\x7b\x3e\xc5\x74\x2d\xa5\x15\x36\xf1\xee\x49\x45\xf0\x26\x58\x3c\x95\x22\xf9\x33\xc9\x0e\x4d\x67\x96\x64\x53\x10\xf1\xbb\x4b\xc1\xf5\xa0\x1e\x7a\x99\xb9\x3c\x7e\xef\x5d\x2d\x8c\x23\x36\xce\xd6\x41\x55\x9c\xa0\xc7\x26\x30\xd2\x88\xd1\x52\x56\xca\x07\xe8\x96\x6b\x08\x54\xd8\x1e\x11\xba\xe5\xc7\xfd\xdd\xf6\xe9\x6d\xfb\xfc\xfa\xf2\xf0\xb8\xbb\xd9\x7f\x76\xb0\x31\x5a\x77\xaa\x4a\x2b\x1e\x41\x23\x9f\x8a\x57\x8a\x22\xec\x60\x01\x7d\x04\x7d\xe6\x13\xf1\x21\x09\xec\x6f\x61\x1a\x90\xd5\xda\x07\xa8\xc5\x9b\x6b\x73\x42\x0e\x52\x4c\xa2\x69\x68\x4e\x7b\x39\x1a\xe1\x4a\xdf\xf9\xf9\xc1\x6a\x05\x49\x80\xb8\x4e\x36\xe7\x8d\x8a\xf4\xdb\x77\x8d\x72\x18\xad\x3f\xf4\xe7\x63\x13\x96\x8b\xba\x7c\x96\x16\xa2\x34\x0e\xe5\xdd\x64\x72\x3f\x8c\x99\x99\xff\xe4\x3f\x6b\xbe\x02\x00\x00\xff\xff\x59\x76\x9d\xd6\x44\x01\x00\x00")

func scriptsInstall_toolsShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsInstall_toolsSh,
		"scripts/install_tools.sh",
	)
}

func scriptsInstall_toolsSh() (*asset, error) {
	bytes, err := scriptsInstall_toolsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/install_tools.sh", size: 324, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsIntegrationSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xce\xcd\x4a\x03\x31\x10\xc0\xf1\x7b\x9e\x62\x5c\xf7\xa0\xc2\x6c\x8a\x82\x87\xc2\x1e\xda\x5a\xaa\x88\xad\x74\xb7\x27\x91\x92\x66\xa7\xdd\xd0\x34\x09\x99\x6c\x3d\x94\xbe\xbb\xa0\x14\x16\x5f\xc0\xe3\x7c\xc0\xff\x77\x7d\x25\x3b\x8e\x72\x63\x9c\x24\x77\x84\x8d\xe2\x56\x30\x25\x40\xea\x3c\x04\x13\x68\xab\x8c\x15\x42\x37\x90\xe5\x37\xd0\x98\xe8\xd4\x81\x20\xcb\x4f\xe3\x51\xf5\xbc\xae\x16\xab\xe5\x64\xfa\x31\xf8\x3c\x67\x70\x2b\x8b\x22\x13\xec\xbb\xa8\x09\x0a\x72\xc7\xa8\x45\x21\x59\x47\x13\x12\x4b\xe3\x38\x29\x6b\xd7\xc9\x7b\xcb\x05\xb7\x42\xcc\x5e\xe6\xaf\xb3\xc5\x7a\xbe\x78\x9a\x56\x65\x7e\xea\x8f\x43\x7c\x38\x5f\xee\xa3\xba\x9e\xbe\xbd\xd7\xbd\x97\xcb\x66\x88\xf7\xe7\x1f\x19\x47\x2d\xef\xa4\x71\x89\x76\x51\x25\xe3\x9d\x10\xa4\x5b\x0f\xd9\xb2\x73\xb0\x72\x5a\xe9\x96\x1a\x18\x77\xc6\x36\x41\xe9\x7d\x26\x76\xc6\xed\x77\x1e\x30\x02\xe2\xd6\xaa\x3d\x8d\x52\xa2\x43\x48\x5c\xe6\x7f\x1a\x80\xce\x37\xc4\x90\xf7\x79\x80\xc8\xd6\x7f\x55\x81\x74\xdd\x46\xe2\xd6\xdb\xa6\x7c\x1c\x00\x22\x20\xfe\xd6\xca\xad\xb2\x4c\x7d\xc7\xe4\x1f\x14\xdf\x01\x00\x00\xff\xff\x59\x6e\x43\x12\xdd\x01\x00\x00")

func scriptsIntegrationShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsIntegrationSh,
		"scripts/integration.sh",
	)
}

func scriptsIntegrationSh() (*asset, error) {
	bytes, err := scriptsIntegrationShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/integration.sh", size: 477, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsUnitSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xb1\x4a\x04\x31\x10\x00\xd0\x3e\x5f\x31\xc6\x2b\x54\xdc\x8c\x3f\x60\xa1\x22\xd8\x29\x1e\x56\x22\xc7\x6c\x6e\xcc\x0d\x1b\x27\x61\x26\xbb\x8d\xf8\xef\x82\x95\xfd\xe3\x9d\x9f\xe1\xea\x86\xb3\x28\xb2\x6e\x30\x93\x9f\x82\xf3\x80\x89\xd7\x06\x5d\x3a\x7f\x92\xd4\x10\xf2\x11\xe2\xee\x02\x8e\x62\x4a\x5f\x0c\x71\xf7\x7d\x7f\xb7\x7f\x3a\xec\x9f\xdf\x5e\x1f\x1e\xdf\x6f\x3e\x7e\x22\x5c\x62\x4a\x31\x78\x5b\x2d\x33\x24\xd6\xcd\x72\x48\xe8\xd9\xa4\x0f\x47\x51\x1f\x54\xeb\x61\xb4\x56\x3d\xf9\xe9\xaf\x74\xcb\x78\x85\xa2\x83\x8b\xd1\x90\xa6\x98\x52\x28\xa2\x4b\x69\x30\x19\x4c\xbe\x48\x7f\xa1\xbc\x50\xe1\xdb\xd9\x68\xf8\xf5\x3f\xfb\x1b\x00\x00\xff\xff\x6c\xc2\xf8\xb3\xba\x00\x00\x00")

func scriptsUnitShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsUnitSh,
		"scripts/unit.sh",
	)
}

func scriptsUnitSh() (*asset, error) {
	bytes, err := scriptsUnitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/unit.sh", size: 186, mode: os.FileMode(509), modTime: time.Unix(1518728536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageGopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd0\xc1\x6e\x22\x31\x0c\x06\xe0\x7b\x9e\x22\x1a\xce\x3b\x61\x18\x06\xd8\x95\x38\xef\xbd\x57\xc4\xc1\x71\x3c\xc1\x22\x89\xa7\x49\x06\x95\x3e\x7d\x85\x5a\xa9\x45\x6a\x25\xa4\x9e\xfd\xff\x9f\x65\x2f\xf4\x13\x8d\x94\x75\x15\x7d\xaa\x75\x2a\xff\x8c\xf1\x5c\x4f\xb3\x6d\x51\xa2\xf1\x12\x20\x79\xe3\x68\x32\x36\x88\x35\x11\x4a\xa5\x6c\x9c\x60\x31\xff\x65\x3a\xfb\xb6\x4a\x0c\x6d\x74\x6a\xa1\x47\xc9\xda\x51\x05\x0e\xe4\xf4\xe7\x50\x3b\xc1\x39\x52\xaa\x50\x59\x52\xab\x54\xa6\xe7\x99\x33\x39\xbd\xd7\x87\xe6\x6e\x97\xf8\x40\xa6\xcc\x16\x25\x46\x48\xae\x34\x47\xa5\x0e\x07\x94\x54\x6a\x06\x4e\xf5\x78\x54\x09\x22\xe9\xbd\xfe\xda\xc3\x20\xb3\x1b\x65\x4e\x2e\x5f\x4d\x60\x6b\x67\x0e\x6e\x02\x3c\x37\xca\x66\x48\x78\xba\xe5\x39\x71\xfd\xd3\x0d\xc3\xaa\xfb\xbb\xde\x6d\x9b\x47\xdc\x8f\xdb\xa3\xdc\x4b\xef\x2f\x78\x48\x90\x54\xd8\x78\x4e\x67\x2f\xbf\x12\x24\x92\x87\x1f\x04\xb9\x50\xce\xec\xe8\xfb\x3e\x05\x78\x85\x1c\x8c\x97\x29\xcb\xcb\xb5\x51\x99\x2e\x5c\x58\xd2\x2d\x07\x80\x16\x76\xfd\xd8\x6f\x60\x18\x00\xfb\x0e\xad\xdd\x76\xb8\xdc\x0c\xeb\x2d\xf4\xab\x1d\x2e\xd1\x75\x9b\xe5\xba\x51\x6f\x01\x00\x00\xff\xff\x76\x97\x0e\x52\x25\x02\x00\x00")

func srcLanguageGopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageGopkgToml,
		"src/LANGUAGE/Gopkg.toml",
	)
}

func srcLanguageGopkgToml() (*asset, error) {
	bytes, err := srcLanguageGopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/Gopkg.toml", size: 549, mode: os.FileMode(436), modTime: time.Unix(1519154091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageBratsBrats_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xd1\x6a\x23\x37\x14\x7d\xb6\xbe\xe2\xa2\x87\xa2\x09\x66\xdc\x0d\xb4\x94\x42\x1e\xe2\x78\xb3\x49\x21\xce\xe2\x49\xda\x87\x65\x09\xb2\x74\xc7\x23\xa2\x91\x54\xe9\xca\xbb\xee\x92\x7f\x2f\x1a\xdb\xa9\xd3\x38\xb4\x94\xbe\x8c\x85\x74\xee\xb9\x73\x8e\xce\x1d\x07\xa9\x1e\xe5\x0a\x61\x19\x25\xa5\x07\xc2\x44\x8c\x99\x3e\xf8\x48\x20\xd8\x88\xb7\x56\xae\x38\x1b\x71\x9f\xca\x33\x48\xea\x26\xad\xb1\x58\x16\x65\x23\x51\x34\x6e\x35\x9c\x95\x52\xe3\x06\x30\x99\x1e\x39\x63\x23\xbe\x32\xd4\xe5\x65\xad\x7c\x3f\x51\xd6\x67\xdd\xfa\xec\x74\xdc\x4c\xac\x59\x2e\xb3\xb1\xba\x34\x9f\x0c\x9d\x3b\xb4\x01\x23\xff\xb7\x35\x2a\x93\x95\x29\x95\x26\x35\x1c\x96\x78\x97\xcc\x64\x65\xdc\xe3\xca\xf3\xe3\x67\xbe\xc7\x95\xe4\xac\x62\xac\xcd\x4e\x81\x71\x86\x44\x05\xdf\xd8\xa8\x48\xad\x9b\x41\xd0\xaf\x32\x8a\xef\x76\x3d\xea\x19\xb6\x32\x5b\xba\xc1\xde\xc7\xcd\x18\x78\x3f\x2c\xf8\x18\xf8\xbb\xd3\x9f\x6e\xca\xaf\xde\x22\x60\x7b\x02\xad\x8f\x10\x72\xea\x50\x83\x0c\x21\xf1\xea\x1f\xb9\x67\x26\x3d\x16\x1e\x93\x1e\x0b\xdf\xe9\x0f\x3f\xbe\xe0\x2d\xfb\x6f\xb2\x7e\x94\x31\xa1\xa8\xd8\x13\x63\x6b\x19\xe1\x01\xce\xa0\xd9\x38\xd5\x45\xef\xcc\x1f\xa8\xa7\xd8\xfa\x88\x4d\x36\x84\xa2\x08\x16\x15\x7c\xfa\xbc\xdc\x10\x16\xc9\x93\x09\x2c\xb2\x03\xef\x14\xb2\x51\x44\xca\xd1\xc1\xc1\x75\xd4\xd7\xce\xd0\x34\xcc\x24\x49\x51\xd5\x37\x32\xa6\x4e\xda\xd2\x6a\x0c\x03\x95\x96\x24\x77\x6c\xd5\x0b\x3a\x90\xd6\x82\xf3\x1a\x13\x1b\x1d\xf2\x15\xa6\xfa\xde\xf5\x3b\xa6\x52\x5f\x31\x36\x7a\xff\x35\xa0\x22\xb1\x37\xe5\xc2\x87\xcd\x45\x7b\xe5\x7b\x14\x55\x55\xdf\x79\xd1\x64\xa5\x10\xb5\xa8\x2a\x36\xda\x83\x1a\x44\xbd\x90\x4e\xfb\x5e\x1c\xec\xee\xfc\x6c\x48\xfb\x5c\x9e\x18\x23\x9c\xc1\x87\x21\x0f\xbf\x45\x43\x18\xd9\x53\x75\xdc\xa8\xf3\x96\x30\xbe\xf0\xe9\x0d\x45\x7b\xf5\xd5\x2b\x07\xff\xa6\x63\x86\x16\x09\x6f\x63\xe8\xa4\x43\xbd\xf0\x99\x30\x1d\x51\x74\xb4\x6a\xba\x8f\xba\xd8\x8d\x58\xbd\xc0\x60\xa5\x42\xf1\xca\xcf\x0b\xa9\x3a\xd4\x63\xe0\x0f\xcf\xf3\x51\xc2\xc3\xc7\xf0\xae\xfa\xff\xbb\xdd\x3b\xf5\x5f\xfa\xf9\x42\xd9\xfb\xf5\x9b\xef\x7f\x69\x2c\xbe\xaa\x7e\xda\x4f\xe9\x1d\x26\x9a\x96\x42\x41\x70\xb2\xfb\xd2\xd4\x77\xc3\x0d\x2c\x70\x65\x12\x61\xbc\x94\xc6\x5e\x49\xa7\x2d\x46\x51\xd6\x15\x1b\x2d\xb2\x6b\x02\xaa\x24\x68\x0c\x7c\x28\x87\xe1\x82\xf9\x30\x2d\x03\x71\xc9\xda\x96\x78\x8d\x31\x19\xef\x60\xeb\x40\x05\x27\x7b\x8b\xce\x43\x28\x7d\xb4\x89\x63\x28\x79\xfa\xf9\x0c\x0e\x93\x7a\x69\xbe\x52\x8e\x28\xf6\x9f\xc5\xfa\x17\x6f\xdc\x6b\x95\xd3\x30\x2b\x04\xbc\xdd\xc2\x53\xb1\x6c\x00\xf1\x03\x97\x30\xc6\x62\xc1\xdc\x93\xb8\x92\x6b\xbc\x55\x2a\xc7\xb8\xb5\x62\x88\xda\xdd\xed\xec\x16\xa8\x33\x09\x4c\x82\x14\x50\x99\xd6\x28\x20\xbf\xdd\x7b\xbe\x8e\x01\x3b\xc3\xa4\xa2\x59\x22\x7c\xe9\x24\x15\x8c\xf6\xd0\x61\xc4\xba\xae\xd9\xf3\xb0\xef\x85\xcc\xf1\x8b\xd0\x26\xfe\xe5\xcb\xc7\x9c\xba\xf3\x10\x84\x0c\xe1\x85\x13\x83\xe5\xbb\xb7\x95\x21\xd4\x05\x77\x2c\xd3\x6b\x74\x94\xa5\xb5\x9b\x01\x75\xed\x12\x49\xa7\xb0\x21\x49\x98\xc6\x70\xfa\xfd\x49\xf9\x8f\xa8\x1b\x54\xde\xe9\xaa\x6e\x3a\x9f\xad\x16\xef\x7f\xcf\xd2\x8a\x4f\x9f\xb7\x57\xf0\x8d\x2f\xee\xe7\xf3\xeb\xf9\x07\xfe\x54\xa2\xc0\xfe\x0c\x00\x00\xff\xff\x4b\x8b\xc6\xb6\xaa\x06\x00\x00")

func srcLanguageBratsBrats_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageBratsBrats_suite_testGo,
		"src/LANGUAGE/brats/brats_suite_test.go",
	)
}

func srcLanguageBratsBrats_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageBratsBrats_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/brats/brats_suite_test.go", size: 1706, mode: os.FileMode(436), modTime: time.Unix(1518729627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageBratsBrats_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x31\x6f\xdb\x30\x10\x85\x67\xf1\x57\x10\x9a\xa4\x26\x96\x97\xa2\x5b\x07\x39\x76\x83\x00\x81\x1d\x40\x4e\x3a\x54\x41\x42\x49\x67\xea\x10\xea\x48\x90\x27\xd7\x6e\xe0\xff\x5e\xc8\x75\x5c\x67\x30\x1a\x74\xd0\x42\xbd\xf7\xf1\xc8\xf7\xe8\x54\xfd\xa2\x34\xc8\xca\x2b\x0e\x4f\x0c\x81\x85\xc0\xce\x59\xcf\x32\x11\x51\xac\x91\xdb\xbe\xca\x6a\xdb\x8d\x6b\x63\xfb\x66\x65\x7b\x6a\xfc\x76\x6c\xb0\xaa\x7a\x34\xcd\x60\x1f\xef\xbd\x2d\x18\x07\x3e\xfe\xa8\xa7\xee\xd9\xa8\x10\x62\x11\x65\xf2\xd4\x61\x29\xe0\x58\x23\xbd\x68\x7b\xe6\x9f\xed\x40\xab\x58\xa4\x42\x8c\xc7\x72\xb9\x98\x2e\x24\x6c\x9c\x51\x48\xf2\x67\x0b\x24\xd9\xca\x4e\xbd\x80\x24\xcb\xd2\x01\x35\x48\x5a\xac\x95\x97\x4f\xf2\xab\xbc\x9b\x42\xa8\x3d\x56\x90\xc4\xaf\xaf\xb7\xf9\xfc\xfa\x3e\xbf\x9e\xed\x76\xf2\x38\x56\x7c\x29\x57\x3d\xd5\x49\x2a\x5f\x45\x74\x72\xac\xec\x9e\x06\x0d\x4f\xde\x84\xef\x01\xf1\xa5\xbc\xb2\x6e\x3b\x19\x0c\xe9\x7b\xe3\x14\x9c\xb1\x5b\x24\x9d\x53\xee\xdc\x77\xe4\x36\xa7\x7b\xd7\x28\x86\xe6\x01\x7c\x40\x4b\x8b\xd5\xb2\x85\x42\x75\xf0\x17\x7e\x0e\x56\xb0\xd2\x48\x7a\xa0\x1c\xc5\xcb\x56\x71\x01\x1c\x66\x8b\xdb\x0f\x0f\x75\xc2\xc9\xa7\xe0\x06\xc4\x4d\x98\x5b\x5e\xb6\x70\xab\x86\x0e\xfc\x0f\xe9\xaa\x0f\x6c\xbb\xe3\x5c\xfb\x25\x0f\x0d\x10\xa3\x32\xe1\x86\xa6\x30\xc4\x01\x54\x23\x84\xe4\xf9\x94\x5f\x8e\x7e\x94\x4d\x99\x3d\x5e\x94\x23\x83\xd4\x6f\xca\xd1\xe6\xcb\xe7\xfd\xa2\x1a\xad\x1e\x2f\xca\x8c\xf5\xaf\xe7\x7f\x5d\xf1\xe1\x76\x67\x1b\xa8\x7b\x56\x95\x81\x3b\x6f\x57\x68\xa0\xa8\x3d\xba\x8f\x1f\xe8\x00\x7b\x0b\xab\x00\x0a\xc8\xb8\x86\x19\xad\xd1\x5b\xea\x80\xf8\x41\x79\x1c\x36\x08\x67\x73\xfa\x66\x7d\x6e\x4c\xd1\xbb\xe1\x1d\x1d\x83\x0e\xe7\x87\x38\xd4\x6e\xfd\x47\x28\x03\x7b\x24\x7d\x29\x95\x73\xf2\xd3\xe1\xa5\x64\xb9\x73\xfb\x5a\x46\x77\x7d\x68\x73\xe7\x12\xe5\x5c\x2a\x44\x14\x4d\xb6\x49\xdc\x58\x08\x52\x49\x6e\x91\xf4\xbb\x12\x47\xd1\x6c\xe3\xa0\xe6\xbd\x3a\x5b\xda\xb9\xe5\x64\x02\x73\x34\x49\x9a\x8a\x28\xda\xa5\x62\xf8\x76\xa9\xf8\x1d\x00\x00\xff\xff\xd2\x36\x38\xee\x09\x04\x00\x00")

func srcLanguageBratsBrats_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageBratsBrats_testGo,
		"src/LANGUAGE/brats/brats_test.go",
	)
}

func srcLanguageBratsBrats_testGo() (*asset, error) {
	bytes, err := srcLanguageBratsBrats_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/brats/brats_test.go", size: 1033, mode: os.FileMode(436), modTime: time.Unix(1519227336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageFinalizeCliCli_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\x6a\xc3\x30\x10\x80\xe1\x59\xf7\x14\x87\x26\xa9\x14\xfb\x21\x0c\xa6\xb3\xed\xbd\xa8\xea\x55\x3d\x2c\x9d\x8c\x75\x5a\x12\xf2\xee\xc1\x90\x31\xdb\x0f\x1f\xfc\x47\x88\x7b\x48\x84\x25\xb0\x7c\x2b\x35\x05\xe0\x72\xd4\x53\xd1\x81\x19\xd0\x26\xd6\xff\xfe\x33\xc4\x5a\xc6\x2a\x8d\xc7\xc4\xb2\xa7\x6a\xdf\x5b\x2d\x94\x82\x05\x30\xf6\x3a\xb1\x24\x0b\x1e\xe0\xaf\x4b\xc4\x8d\x9a\x4e\x99\x9d\xe2\xc7\xcb\x86\xcd\xe3\x1d\xcc\x42\x89\x9b\xd2\x39\x07\xce\x5f\x41\x7e\x33\x9d\xee\x6a\x0f\x66\xe9\xb2\x1e\x14\x9b\xd3\x4f\xb4\x33\x4b\xc8\x7c\x23\x9c\x32\xe3\xda\x59\xc9\x7a\x78\xc0\x33\x00\x00\xff\xff\x09\x2d\x2d\xe4\xc0\x00\x00\x00")

func srcLanguageFinalizeCliCli_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageFinalizeCliCli_suite_testGo,
		"src/LANGUAGE/finalize/cli/cli_suite_test.go",
	)
}

func srcLanguageFinalizeCliCli_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageFinalizeCliCli_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/finalize/cli/cli_suite_test.go", size: 192, mode: os.FileMode(436), modTime: time.Unix(1518729288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageFinalizeCliMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\xb9\xb8\x6a\xb9\x00\x01\x00\x00\xff\xff\x6d\xe7\x55\xf8\x1f\x00\x00\x00")

func srcLanguageFinalizeCliMainGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageFinalizeCliMainGo,
		"src/LANGUAGE/finalize/cli/main.go",
	)
}

func srcLanguageFinalizeCliMainGo() (*asset, error) {
	bytes, err := srcLanguageFinalizeCliMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/finalize/cli/main.go", size: 31, mode: os.FileMode(436), modTime: time.Unix(1519153483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageFinalizeFinalizeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xcb\xcc\x4b\xcc\xc9\xac\x4a\xe5\x02\x04\x00\x00\xff\xff\x36\x16\x8c\x08\x11\x00\x00\x00")

func srcLanguageFinalizeFinalizeGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageFinalizeFinalizeGo,
		"src/LANGUAGE/finalize/finalize.go",
	)
}

func srcLanguageFinalizeFinalizeGo() (*asset, error) {
	bytes, err := srcLanguageFinalizeFinalizeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/finalize/finalize.go", size: 17, mode: os.FileMode(436), modTime: time.Unix(1518729019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageFinalizeFinalize_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xc1\xca\x83\x30\x10\x04\xe0\x73\xf6\x29\x96\x9c\x92\x9f\x1f\x7d\x0b\xe9\x59\xbd\x97\x34\x5d\xd3\x45\xdd\x88\xd9\x5c\x5a\xfa\xee\x45\xb0\xb7\xde\x06\x66\xf8\x66\x0b\x71\x0e\x89\x70\x62\x09\x0b\x3f\xe9\xaa\x54\x14\x80\xd7\x2d\xef\x8a\x0e\x4c\x83\x36\xb1\x3e\xea\xad\x89\x79\x6d\xb3\x14\x6e\x13\xcb\x9c\xb2\xfd\xdd\xe5\x95\x52\xb0\x00\xc6\x1e\x12\x4b\xb2\xe0\x01\xa6\x2a\x11\x47\x2a\xda\x9d\x3f\x4e\xf1\xef\x1c\x34\xa3\xc7\x17\x98\x9e\x12\x17\xa5\xbd\x0b\xbc\x5c\x82\xdc\x17\xda\xdd\x91\x3d\x98\xbe\xca\xb0\x51\x2c\x4e\xff\xd1\x7e\x05\x1c\x2a\x2b\x59\x0f\x6f\xf8\x04\x00\x00\xff\xff\x84\x15\xaf\xba\xc5\x00\x00\x00")

func srcLanguageFinalizeFinalize_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageFinalizeFinalize_suite_testGo,
		"src/LANGUAGE/finalize/finalize_suite_test.go",
	)
}

func srcLanguageFinalizeFinalize_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageFinalizeFinalize_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/finalize/finalize_suite_test.go", size: 197, mode: os.FileMode(436), modTime: time.Unix(1518729213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageFinalizeFinalize_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\x02\x31\x0c\x46\xe1\x7d\x4f\x91\x0b\xd4\xee\x85\x9e\x45\x42\xfd\x0d\xa1\x9a\x48\x13\x37\x9e\x5e\xd4\x99\xc5\xac\xdf\xe3\x7b\xf2\x98\x2c\xa0\x9b\x1a\xdf\xf5\x8d\x4b\x22\xb2\x94\xd6\xc4\xcf\x02\xc3\xe2\x04\x3d\x7c\x4c\x81\x51\x0d\x7f\xad\x81\xbe\xcf\x27\x71\xaa\xf5\x8a\x48\x35\x4e\x75\xeb\xdf\x33\x7e\xc6\xbf\x6d\x7c\x3f\xf2\x9f\x00\x00\x00\xff\xff\x2b\xae\x7d\xfe\x75\x00\x00\x00")

func srcLanguageFinalizeFinalize_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageFinalizeFinalize_testGo,
		"src/LANGUAGE/finalize/finalize_test.go",
	)
}

func srcLanguageFinalizeFinalize_testGo() (*asset, error) {
	bytes, err := srcLanguageFinalizeFinalize_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/finalize/finalize_test.go", size: 117, mode: os.FileMode(436), modTime: time.Unix(1518729092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageHooksHooks_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xb1\x8e\x83\x30\x10\x04\xd0\xda\xfb\x15\x2b\x57\xf6\xe9\x04\x7f\x71\xa2\x06\xfa\x93\xcf\xb7\x59\x56\x80\x17\xe1\x75\x15\xe5\xdf\x23\xa2\x94\xe9\x46\x7a\x9a\x99\x23\xe5\x35\x31\xe1\xa2\xba\xd6\x5f\xa3\x6a\x00\xb2\x1f\x7a\x1a\x06\x70\x1d\x7a\x16\x5b\xda\x5f\x97\x75\xef\xb5\x54\xe9\x59\xca\xca\xea\x3f\x9b\xee\xc4\xc9\x03\x38\x7f\x2d\x49\x61\x0f\x11\xe0\xd6\x4a\xc6\x99\xaa\x0d\xd7\x49\x30\xfc\x7a\x6b\x37\x47\xbc\x83\x1b\x89\xa5\x1a\x9d\x3f\x49\xb6\x21\x95\xff\x8d\xce\x70\xe5\x08\x6e\x6c\x65\x3a\x28\xd7\x60\xdf\xe8\x5f\x75\x9c\x9a\x18\xf9\x08\x0f\x78\x06\x00\x00\xff\xff\x27\x86\xa8\x48\xbc\x00\x00\x00")

func srcLanguageHooksHooks_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageHooksHooks_suite_testGo,
		"src/LANGUAGE/hooks/hooks_suite_test.go",
	)
}

func srcLanguageHooksHooks_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageHooksHooks_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/hooks/hooks_suite_test.go", size: 188, mode: os.FileMode(436), modTime: time.Unix(1518729931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageIntegrationIntegration_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xdb\x38\x12\xfe\x2c\xfd\x8a\x39\x02\x2d\xa8\xd6\x90\x73\xbd\x3b\x5c\xef\x80\x14\xc8\x5b\x9b\x2c\x36\xae\x61\x3b\xdd\x5d\x14\x45\x41\x4b\x23\x99\x1b\x89\x54\xf9\x92\xc6\x1b\xf8\xbf\x2f\x48\x51\xb6\x6c\x27\x69\xda\xfd\xb2\x1f\x62\xd3\x7c\x79\x38\xcf\x33\x33\x9c\x49\xc3\xb2\x6b\x56\x22\x70\x61\xb0\x54\xcc\x70\x29\x3e\x1b\xd4\x26\x8e\x79\xdd\x48\x65\x80\xc6\x11\x41\x91\xc9\x9c\x8b\x72\xf8\xbb\x96\x82\xc4\x11\x29\x2a\x56\xfa\xef\xda\xb8\x2f\x81\x66\x68\x55\xe5\x86\x52\xb7\x9f\x43\xbc\xc5\xcc\x0d\x1b\x66\x16\xc3\x82\x57\xe8\x06\x6e\xc2\xf0\x1a\x49\x1c\x47\xa4\xe4\x66\x61\xe7\x69\x26\xeb\xe1\xbc\x62\xa2\x1c\x6a\xac\x6f\x50\x91\xed\xa5\xac\x92\x36\x2f\xa4\x15\xb9\x5a\x0e\x2b\x3e\x9f\x5b\x5e\xe5\xce\xea\x61\x66\x4d\xc5\xb4\x76\x58\x29\xf4\x8f\x48\xa1\xf9\xb0\xe4\xe2\xba\x94\xe4\xfe\x35\x59\x63\xc9\xbc\x11\x8e\x2b\x17\x25\x89\x93\x38\xbe\x61\x0a\xe6\xcd\x29\x57\xa0\x8d\xe2\xa2\x6c\x27\xba\xfb\x3e\xa0\xd2\x5c\x8a\xfe\x5a\x10\x2f\x3f\xee\xf6\x40\xb0\x29\x0d\x9b\x7b\x4b\xe3\x76\x6f\x1c\x17\x56\x64\xc0\x05\x37\x34\x81\xbb\x38\x72\x52\xa6\x53\x8f\xf9\x81\x29\xfa\x7c\xf7\xbe\x01\x90\x9b\x76\x44\x06\x40\xc8\xe6\x27\x18\x09\x56\x23\x50\x7f\x42\x03\x2f\x00\xeb\xc6\x2c\x13\x92\x04\xd4\x63\x29\x2b\x8f\xd9\x59\x75\xc2\xb2\x05\xe6\x03\x20\x99\x1f\x90\x01\x18\x65\x71\xfd\x7b\xc3\x75\x0d\xd1\x33\xac\x03\x39\xc5\x82\xd9\xca\x5c\x62\x2d\xd5\x72\x00\xa4\xf6\x03\x67\xd8\x3f\x5f\xbd\xbe\x74\xdf\x79\xbb\x03\xda\x15\x28\xa4\x82\xc6\x6a\x77\x01\x6b\x1a\xfd\x04\xec\x53\xae\xaf\x1d\x0e\xd7\xd7\x0e\xef\x5f\xaf\xff\xbd\x85\xeb\xe6\x1f\x44\x1d\x33\xa5\x91\x26\xf1\xaa\xf5\xe7\x67\x38\x84\xe9\x52\x64\x0b\x25\x05\xff\x03\xf3\x63\x2c\xa4\xc2\xa9\xe5\x06\xa9\xf3\x04\x4d\xe0\xe3\xa7\xf9\xd2\xa0\xf3\xc5\x70\x08\x13\x2b\x40\x8a\x0c\xe3\x88\x17\xfb\xbe\x3f\x3c\x04\x42\xdc\xce\x68\xcf\xf5\x03\x40\xa5\xe0\xff\x87\xeb\x10\x08\x0e\xbf\x12\xfc\x8b\xc5\x6a\xb9\x1f\x11\x34\x89\xa3\xe8\xec\xb6\xc1\xcc\x50\x54\x2a\x49\x47\xd2\xcc\x24\x3d\x67\x37\xf8\x3e\xcb\xac\x52\x98\xd3\x24\x89\xe3\x28\xca\x99\x61\x6b\x7c\x97\x83\xe9\x25\x53\x7a\xc1\x2a\xba\x67\xc6\xd3\x30\xa3\x48\xa1\xb1\x4a\x80\x43\x8e\xa3\x55\x1c\x77\x13\xad\x18\x77\xab\x78\x35\x00\xaf\x8f\xdb\x11\x66\x93\x2d\x8d\x80\x55\x15\x08\x99\xa3\x8e\x23\xa7\xb4\x33\x0f\x95\x92\xca\x4b\x57\xa1\xf0\x47\x13\x78\x03\x07\x5e\x31\xb7\x1e\xac\xbf\x12\x75\xb0\xbf\x65\xf6\xfc\x87\x69\xec\x7b\x68\x3f\x29\xbb\x64\x6c\x79\xfa\x04\x6f\xc5\xdc\xf8\xea\x2d\x17\xf9\x44\x4a\xe3\x5c\xf2\x14\x8f\x84\x3d\xeb\xbc\x92\xcd\xf2\xa4\x38\x97\x35\xd2\x24\x49\x67\x92\x4e\x6d\x96\x61\xb0\xb1\xdb\x34\x45\xcc\x27\x4c\xe4\xb2\xa6\xbd\xd9\x10\xf1\x53\x93\x4b\xeb\x3e\x5b\xbb\xde\xf9\xc7\xeb\x17\xc5\x0d\xaa\x78\x95\xdc\x1f\xca\x47\x85\x41\xb5\x15\xc9\x0f\xb8\xa7\x73\x65\xb2\x17\xe3\x3b\x3c\x26\x58\xcb\x1b\x1c\xef\x0a\x78\x4f\x94\xed\xb1\xdc\x41\x3a\xc5\x0a\x0d\xbe\x57\xcd\x82\x09\xcc\x27\xd2\x1a\xd4\xfb\xda\x38\x66\xfe\x39\x9c\xa1\x36\x17\x9b\x0a\x44\x0d\xbc\x08\x0f\x73\x3a\xf3\x56\x4f\xb0\xe4\xda\xa0\x7a\xcb\x78\x75\xce\x44\x5e\xa1\xa2\x6e\x9c\xc4\xd1\xc4\x8a\x69\x83\x99\xa6\x66\x00\xa4\x07\x02\x5e\x1a\xe2\x5f\x02\x7f\xc9\xd8\xea\xc5\x51\xd3\x1c\x89\xfc\x44\x8a\x82\xab\x9a\xb2\xa6\x81\x17\x9d\xc9\x47\x4d\xe3\xaf\x0a\x4c\x58\xd3\xa4\xee\xc4\x3d\x1e\x3d\xbb\x41\x61\x2c\xab\xaa\x65\x27\x3c\xfd\xf8\xa9\x2d\x0b\x83\x36\x05\x12\xb8\x83\x90\x50\x0e\xe7\x42\x68\xc3\x44\x86\x53\xc3\xbc\x0e\xb0\x1a\xc0\xab\x83\x17\xae\x12\xa6\x53\xcc\xa4\xc8\x93\x74\xba\x90\xb6\xca\xe9\xd9\x17\xcb\xaa\x35\xdc\x1d\x99\x5c\x8d\x46\x17\xa3\x77\x64\xd5\x13\xd9\x41\x06\x0a\x1b\x1f\xed\x66\xc2\xbe\xd8\x41\x86\x09\x6a\xc3\x94\xf9\x26\xf9\x6e\xdf\xdf\x87\x7f\xc7\xe0\xa8\xe1\xef\x14\x32\x83\x6a\xb6\x60\x82\xde\x6c\x15\xe6\x04\xe6\x52\x56\x8e\x0b\x6b\x78\xd0\x62\xba\xb1\xad\xff\x42\x1f\xad\x37\xec\xe6\xfd\x4c\xd2\x63\x1c\xf1\xca\xd3\xdd\xe0\xac\x11\xda\x4e\x25\xbd\x64\xd7\x48\x77\xaf\x79\x0c\x4a\xe1\x97\x07\xa0\x7c\xd9\x9a\x30\x51\x22\x25\x6f\x0e\x81\xc0\x4b\x08\xbc\x1e\xc7\xf3\x1a\x6f\x60\x7b\xd6\x6c\xe9\x75\xce\xf4\x8c\xe9\x6b\xba\x51\x27\x1c\xdd\xd1\x92\xbc\x4a\xff\xfb\x9f\xf4\xc0\x67\x4d\xef\xec\xa5\xad\x0c\xef\x15\xae\x6f\xa3\xfc\xef\x20\xa0\x04\x18\xad\x51\x99\x2b\x8d\x7a\xac\xe4\xed\xf2\xd4\x3a\xa5\xa6\x86\x95\x5c\x94\x17\xc5\x58\xa1\x46\x61\x68\xc1\x6f\x8d\x55\x38\x62\x35\xae\xbd\x79\x17\x47\x27\x52\x18\xbc\x35\x94\x7c\xe5\x66\x01\x4c\x80\x15\x7b\x0d\x4b\xff\x89\x8b\xda\x22\x7f\xc6\xb2\x45\xef\x65\x8c\x5c\x59\xda\xee\x84\xda\xe9\x68\x7a\xcd\x1b\x4a\x26\x56\x08\x2e\x4a\x08\xd0\xee\xfd\xf1\x5d\x45\x14\xad\xe2\x28\x5a\xf9\x42\x7c\x61\x28\xb1\x1a\x35\x30\x68\x1c\x0f\xc8\x3d\x11\xd0\x2d\x13\xd7\x83\x35\x2d\x97\x6d\x83\x22\xbf\x7b\x2f\x00\x47\xf8\xd5\xcb\xe1\x3b\x81\x87\xbd\x1c\x45\x39\x16\xa8\xda\x2b\xd3\x93\x4a\xfa\x06\xc7\xcd\xcf\x9b\xb7\xbc\x42\x07\xd9\x75\xd8\xe9\x4f\x92\x0b\x1a\x8a\xdc\xee\x9b\xf0\x92\x98\xba\x69\x39\x65\x75\xee\x8e\xb9\x2e\x3d\x3d\x91\x75\xcd\x44\x4e\x49\xd6\x90\xc1\x3d\xf5\xd3\xdd\x31\x80\xf6\x2e\x7f\x38\x14\xcf\x3a\x4f\x27\x56\x3c\xd1\x78\xd9\x95\x17\xda\x01\xb9\x35\xa3\x58\x51\xf0\x6c\x4f\x19\xf7\x8e\x2b\x81\x66\xd6\xae\x53\xef\xa7\x96\x95\x1f\x6e\xd3\x25\x21\x70\xb4\x53\x7d\x13\x43\xc9\x20\x1c\xf3\x04\xfc\x78\xf3\xb0\x9c\xcf\x66\xe3\xcf\xe3\xc9\xfb\x5f\x7f\x3b\x74\xc9\xd6\x6a\x7b\x35\xf9\x79\x00\x7e\x69\x7a\xdf\xda\xca\x83\x3c\xca\xb7\x25\xac\xcd\x95\xaa\xd6\xa4\xac\xaa\x42\x5b\xba\x46\xfa\x26\xc6\x4e\x3d\x6d\xbb\xc8\x53\x5f\x13\xdb\x12\xe9\xe9\xac\xe5\x2b\x6a\x93\x4e\x1b\xc5\x85\x29\x28\x79\xa6\xd3\x67\x4e\x8a\x60\x47\x7a\x2e\xb5\x11\xcc\x35\x27\x9b\xb9\xb1\xf4\x4f\x7b\x4b\x68\xd7\x65\xab\x24\x76\x7f\xdb\xc9\x3b\x92\xbb\x4e\x79\x20\x5d\x5d\x92\x2c\x98\x06\x21\x21\xd8\xb7\x9d\x0c\xbc\x80\x7f\xdc\x97\x87\xdb\x69\xb8\xce\xf1\x4d\x22\xba\xf6\xed\xc7\x43\xfe\xaf\x44\x7c\x17\x9d\xbd\x88\x7f\x38\xe0\x1f\x89\xf7\xef\x09\xf7\x4d\xb4\x7f\x47\xb0\xf7\x62\x7d\x1d\xea\x3e\x6a\x1f\x37\x39\xac\x04\xf3\xc2\xea\x99\xfb\x6f\xd2\xaf\xfb\x58\xf8\x33\x00\x00\xff\xff\x32\x15\x2e\xfe\x2a\x10\x00\x00")

func srcLanguageIntegrationIntegration_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageIntegrationIntegration_suite_testGo,
		"src/LANGUAGE/integration/integration_suite_test.go",
	)
}

func srcLanguageIntegrationIntegration_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageIntegrationIntegration_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/integration/integration_suite_test.go", size: 4138, mode: os.FileMode(436), modTime: time.Unix(1518730134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageIntegrationSimple_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8b\xdb\x30\x10\x85\xcf\xd2\xaf\x98\xea\x24\x97\x60\xdf\x0b\x39\x38\x9b\x74\xd9\x52\xb2\x0b\xdd\x9e\x4a\x09\x8a\x3d\xb6\x87\xd8\x92\x90\xc6\x5d\x87\xe0\xff\x5e\xe4\x6e\xba\x9b\xd2\x8b\x31\x9a\x37\xc3\xf7\xde\xf3\xa6\x3a\x99\x16\x81\x2c\x63\x1b\x0c\x93\xb3\x07\xc6\xc8\x52\xd2\xe0\x5d\x60\xd0\x52\x28\x6f\xb8\x2b\x1a\xea\x31\xfd\x28\x29\x85\x6a\x89\xbb\xf1\x98\x57\x6e\x28\xaa\xde\x8d\x75\xe3\x46\x5b\x87\x73\xd1\xd3\xf1\x38\x52\x5f\xa7\xb3\x45\x35\x72\x6f\x62\x4c\x0b\x39\xbc\x5f\x71\x36\x52\xd1\x92\x3d\xb5\x4e\xfd\x7f\xe6\x06\x6c\x8d\x92\x99\x94\xbf\x4c\x80\x03\xac\x61\x8b\xb1\x0a\x74\x44\xad\xbe\xd1\xe0\x7b\x84\x87\x37\x62\x78\xc6\xc8\x6a\x05\xcd\x68\x2b\x9d\xc1\x45\x8a\xb4\x65\xbc\x87\x8f\xaf\x0c\x79\xe9\xbd\x14\x65\xc3\x18\x76\xa6\xea\xf4\x9b\x52\x50\xb3\x28\x3f\xac\xc1\x52\xbf\xbc\x08\xe3\x7d\xbe\xc5\xc8\xc1\x9d\x75\x26\x85\x98\xe5\xf2\x06\x8b\x44\x8a\x39\x93\x52\x14\x05\x3c\x3f\x6e\x1f\x01\x27\xdf\x1b\xb2\xf0\xd2\xa1\x05\x76\x30\x98\x13\x02\x77\x18\x11\xac\x63\xf0\x68\x6b\xb2\xad\x14\x4f\x77\xce\x32\x4e\xac\x55\xba\x54\x39\xcb\x86\x6c\x4c\x4a\xc0\xc9\x2c\x8e\x52\xc2\x37\x2e\xc4\x06\x1b\x17\xf0\x5f\xe2\x57\x96\xab\xb5\x3d\xbe\xe8\x6b\x39\xf9\x17\x47\x56\x1f\xfd\x96\xc2\x0a\x54\x43\x13\x8f\x01\xa3\x5a\x81\x8a\x4b\x6a\x4b\xb7\x2a\xcb\xae\x2e\x37\xd7\xb2\x22\xac\xe1\xc7\xcf\xc8\x81\x6c\x7b\x51\x97\xcb\xd7\x72\x7f\xff\xbd\xbc\xdf\xcd\xf3\xe1\x6f\xa1\x2a\xe5\x20\x9e\xc6\xd8\x95\xde\x97\xb6\xbe\x73\xb6\xa1\x30\x68\xe3\xfd\x92\x52\xfa\x3c\xb0\x56\x9d\x89\x10\xdd\x80\x87\x44\x95\xf3\xc4\x40\x76\x31\xea\xc7\xd8\x61\x9d\xe2\xbe\xb5\x29\x12\x7a\x5c\x01\x86\x00\x9f\xd6\x69\x9e\x7f\xa6\x1e\xa3\x56\x37\x67\xd4\x82\xbd\x9b\x3c\x56\xac\x31\x84\x2c\x7f\x76\x7a\x83\x7b\xea\x75\xf6\x7e\xb4\x5c\x4b\xc3\xbd\x63\xbd\xc1\xdd\xe0\xf9\xfc\x47\x91\x10\xe7\x4c\xce\x99\xfc\x1d\x00\x00\xff\xff\x8b\x27\xeb\xe7\xf8\x02\x00\x00")

func srcLanguageIntegrationSimple_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageIntegrationSimple_testGo,
		"src/LANGUAGE/integration/simple_test.go",
	)
}

func srcLanguageIntegrationSimple_testGo() (*asset, error) {
	bytes, err := srcLanguageIntegrationSimple_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/integration/simple_test.go", size: 760, mode: os.FileMode(436), modTime: time.Unix(1519227373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageSupplyCliCli_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xcd\xaa\xc2\x30\x10\x40\xe1\x75\xe6\x29\x86\xac\x92\xcb\xa5\x7d\x88\x82\xb8\x6e\xbb\x97\x18\xc7\x38\x34\x7f\x34\x93\x85\x88\xef\x2e\x05\x97\xee\x0e\x7c\x70\xaa\xf3\x9b\x0b\x84\xc9\x71\xbe\x08\x35\x01\xe0\x54\xcb\x2e\x68\x40\x0d\xa8\x03\xcb\xa3\x5f\x07\x5f\xd2\x58\x72\xe3\x31\x70\xde\x42\xd1\xbf\xad\x24\x0a\x4e\x03\x28\x7d\x9c\x38\x07\x0d\x16\xe0\xde\xb3\xc7\x95\x9a\x4c\x91\x8d\xe0\xdf\xd7\x86\xd5\xe2\x0b\xd4\x4c\x81\x9b\xd0\x7e\x72\x1c\xcf\x2e\xdf\x22\xed\xe6\x68\x0b\x6a\xee\x79\xa9\xe4\x9b\x91\x7f\xd4\x4b\xaf\x35\x3e\x71\x8a\x8c\x4b\x67\x21\x6d\xe1\x0d\x9f\x00\x00\x00\xff\xff\xe6\x5b\xbf\xd2\xbe\x00\x00\x00")

func srcLanguageSupplyCliCli_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageSupplyCliCli_suite_testGo,
		"src/LANGUAGE/supply/cli/cli_suite_test.go",
	)
}

func srcLanguageSupplyCliCli_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageSupplyCliCli_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/supply/cli/cli_suite_test.go", size: 190, mode: os.FileMode(436), modTime: time.Unix(1518729323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageSupplyCliMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\xb9\xb8\x6a\xb9\x00\x01\x00\x00\xff\xff\x6d\xe7\x55\xf8\x1f\x00\x00\x00")

func srcLanguageSupplyCliMainGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageSupplyCliMainGo,
		"src/LANGUAGE/supply/cli/main.go",
	)
}

func srcLanguageSupplyCliMainGo() (*asset, error) {
	bytes, err := srcLanguageSupplyCliMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/supply/cli/main.go", size: 31, mode: os.FileMode(436), modTime: time.Unix(1519153294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageSupplySupplyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\x2d\x28\xc8\xa9\xe4\x02\x04\x00\x00\xff\xff\xbc\x36\x20\x2c\x0f\x00\x00\x00")

func srcLanguageSupplySupplyGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageSupplySupplyGo,
		"src/LANGUAGE/supply/supply.go",
	)
}

func srcLanguageSupplySupplyGo() (*asset, error) {
	bytes, err := srcLanguageSupplySupplyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/supply/supply.go", size: 15, mode: os.FileMode(436), modTime: time.Unix(1518729034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageSupplySupply_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xc1\xca\xc2\x30\x10\x04\xe0\x73\xf6\x29\x96\x9c\x92\x9f\x9f\xf6\x2d\xc4\x73\xdb\xbb\xc4\xb8\xae\x4b\xdb\x24\x34\x9b\x83\x88\xef\x2e\x55\x8f\xde\x06\x3e\x66\xa6\x84\x38\x07\x26\xac\xad\x94\xe5\x7e\x52\xaa\x0a\x20\x6b\xc9\x9b\xa2\x03\xd3\xa1\x65\xd1\x5b\x3b\x77\x31\xaf\x7d\x4e\x55\x7a\x96\x34\x73\xb6\xbf\x2d\xaf\xc4\xc1\x02\x18\xbb\x2f\x49\x62\x0b\x1e\xe0\xda\x52\xc4\x89\xaa\x8e\xef\x17\xa7\xf8\xf7\xe5\x6e\xf2\xf8\x00\x33\x10\x4b\x55\xda\x0e\x41\x96\x63\x48\x97\x85\x36\xb7\x67\x0f\x66\x68\x69\x2c\x14\xab\xd3\x7f\xb4\x9f\x3e\x8e\x4d\x94\xac\x87\x27\xbc\x02\x00\x00\xff\xff\x0e\xd4\xc8\xb7\xbf\x00\x00\x00")

func srcLanguageSupplySupply_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageSupplySupply_suite_testGo,
		"src/LANGUAGE/supply/supply_suite_test.go",
	)
}

func srcLanguageSupplySupply_suite_testGo() (*asset, error) {
	bytes, err := srcLanguageSupplySupply_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/supply/supply_suite_test.go", size: 191, mode: os.FileMode(436), modTime: time.Unix(1518729177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageSupplySupply_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0e\x02\x20\x0c\x46\xe1\x9d\x53\xf4\x02\xc8\x6e\xc2\x59\x4c\x83\x7f\x1a\x82\xb6\x84\x96\xc1\xdb\x1b\xc5\xc1\xf9\xbd\x7c\x93\xdb\x60\x01\xf9\x9e\xf3\xf1\xba\x05\x3c\x52\x2a\x45\xec\x2a\x50\x2c\x0e\xd0\xd3\xda\x10\x28\x65\xb7\xbd\x1a\xea\x59\x2f\x62\x94\xf3\x1d\x1e\x5d\x39\xba\x69\xfd\x7c\xfe\x15\x4e\xfb\xd1\xf5\x9f\x7e\x07\x00\x00\xff\xff\x6f\x3e\x2d\x73\x6f\x00\x00\x00")

func srcLanguageSupplySupply_testGoBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageSupplySupply_testGo,
		"src/LANGUAGE/supply/supply_test.go",
	)
}

func srcLanguageSupplySupply_testGo() (*asset, error) {
	bytes, err := srcLanguageSupplySupply_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/supply/supply_test.go", size: 111, mode: os.FileMode(436), modTime: time.Unix(1518729136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcLanguageVendorGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func srcLanguageVendorGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_srcLanguageVendorGitkeep,
		"src/LANGUAGE/vendor/.gitkeep",
	)
}

func srcLanguageVendorGitkeep() (*asset, error) {
	bytes, err := srcLanguageVendorGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/LANGUAGE/vendor/.gitkeep", size: 0, mode: os.FileMode(436), modTime: time.Unix(1518730108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".envrc": Envrc,
	".gitignore": Gitignore,
	"README.md": readmeMd,
	"VERSION": version,
	"bin/compile": binCompile,
	"bin/detect": binDetect,
	"bin/finalize": binFinalize,
	"bin/release": binRelease,
	"bin/supply": binSupply,
	"fixtures/.gitkeep": fixturesGitkeep,
	"fixtures/brats/.gitkeep": fixturesBratsGitkeep,
	"fixtures/simple_test/some_file.txt": fixturesSimple_testSome_fileTxt,
	"manifest.yml": manifestYml,
	"scripts/brats.sh": scriptsBratsSh,
	"scripts/build.sh": scriptsBuildSh,
	"scripts/install_go.sh": scriptsInstall_goSh,
	"scripts/install_tools.sh": scriptsInstall_toolsSh,
	"scripts/integration.sh": scriptsIntegrationSh,
	"scripts/unit.sh": scriptsUnitSh,
	"src/LANGUAGE/Gopkg.toml": srcLanguageGopkgToml,
	"src/LANGUAGE/brats/brats_suite_test.go": srcLanguageBratsBrats_suite_testGo,
	"src/LANGUAGE/brats/brats_test.go": srcLanguageBratsBrats_testGo,
	"src/LANGUAGE/finalize/cli/cli_suite_test.go": srcLanguageFinalizeCliCli_suite_testGo,
	"src/LANGUAGE/finalize/cli/main.go": srcLanguageFinalizeCliMainGo,
	"src/LANGUAGE/finalize/finalize.go": srcLanguageFinalizeFinalizeGo,
	"src/LANGUAGE/finalize/finalize_suite_test.go": srcLanguageFinalizeFinalize_suite_testGo,
	"src/LANGUAGE/finalize/finalize_test.go": srcLanguageFinalizeFinalize_testGo,
	"src/LANGUAGE/hooks/hooks_suite_test.go": srcLanguageHooksHooks_suite_testGo,
	"src/LANGUAGE/integration/integration_suite_test.go": srcLanguageIntegrationIntegration_suite_testGo,
	"src/LANGUAGE/integration/simple_test.go": srcLanguageIntegrationSimple_testGo,
	"src/LANGUAGE/supply/cli/cli_suite_test.go": srcLanguageSupplyCliCli_suite_testGo,
	"src/LANGUAGE/supply/cli/main.go": srcLanguageSupplyCliMainGo,
	"src/LANGUAGE/supply/supply.go": srcLanguageSupplySupplyGo,
	"src/LANGUAGE/supply/supply_suite_test.go": srcLanguageSupplySupply_suite_testGo,
	"src/LANGUAGE/supply/supply_test.go": srcLanguageSupplySupply_testGo,
	"src/LANGUAGE/vendor/.gitkeep": srcLanguageVendorGitkeep,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".envrc": &bintree{Envrc, map[string]*bintree{}},
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"VERSION": &bintree{version, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		"compile": &bintree{binCompile, map[string]*bintree{}},
		"detect": &bintree{binDetect, map[string]*bintree{}},
		"finalize": &bintree{binFinalize, map[string]*bintree{}},
		"release": &bintree{binRelease, map[string]*bintree{}},
		"supply": &bintree{binSupply, map[string]*bintree{}},
	}},
	"fixtures": &bintree{nil, map[string]*bintree{
		".gitkeep": &bintree{fixturesGitkeep, map[string]*bintree{}},
		"brats": &bintree{nil, map[string]*bintree{
			".gitkeep": &bintree{fixturesBratsGitkeep, map[string]*bintree{}},
		}},
		"simple_test": &bintree{nil, map[string]*bintree{
			"some_file.txt": &bintree{fixturesSimple_testSome_fileTxt, map[string]*bintree{}},
		}},
	}},
	"manifest.yml": &bintree{manifestYml, map[string]*bintree{}},
	"scripts": &bintree{nil, map[string]*bintree{
		"brats.sh": &bintree{scriptsBratsSh, map[string]*bintree{}},
		"build.sh": &bintree{scriptsBuildSh, map[string]*bintree{}},
		"install_go.sh": &bintree{scriptsInstall_goSh, map[string]*bintree{}},
		"install_tools.sh": &bintree{scriptsInstall_toolsSh, map[string]*bintree{}},
		"integration.sh": &bintree{scriptsIntegrationSh, map[string]*bintree{}},
		"unit.sh": &bintree{scriptsUnitSh, map[string]*bintree{}},
	}},
	"src": &bintree{nil, map[string]*bintree{
		"LANGUAGE": &bintree{nil, map[string]*bintree{
			"Gopkg.toml": &bintree{srcLanguageGopkgToml, map[string]*bintree{}},
			"brats": &bintree{nil, map[string]*bintree{
				"brats_suite_test.go": &bintree{srcLanguageBratsBrats_suite_testGo, map[string]*bintree{}},
				"brats_test.go": &bintree{srcLanguageBratsBrats_testGo, map[string]*bintree{}},
			}},
			"finalize": &bintree{nil, map[string]*bintree{
				"cli": &bintree{nil, map[string]*bintree{
					"cli_suite_test.go": &bintree{srcLanguageFinalizeCliCli_suite_testGo, map[string]*bintree{}},
					"main.go": &bintree{srcLanguageFinalizeCliMainGo, map[string]*bintree{}},
				}},
				"finalize.go": &bintree{srcLanguageFinalizeFinalizeGo, map[string]*bintree{}},
				"finalize_suite_test.go": &bintree{srcLanguageFinalizeFinalize_suite_testGo, map[string]*bintree{}},
				"finalize_test.go": &bintree{srcLanguageFinalizeFinalize_testGo, map[string]*bintree{}},
			}},
			"hooks": &bintree{nil, map[string]*bintree{
				"hooks_suite_test.go": &bintree{srcLanguageHooksHooks_suite_testGo, map[string]*bintree{}},
			}},
			"integration": &bintree{nil, map[string]*bintree{
				"integration_suite_test.go": &bintree{srcLanguageIntegrationIntegration_suite_testGo, map[string]*bintree{}},
				"simple_test.go": &bintree{srcLanguageIntegrationSimple_testGo, map[string]*bintree{}},
			}},
			"supply": &bintree{nil, map[string]*bintree{
				"cli": &bintree{nil, map[string]*bintree{
					"cli_suite_test.go": &bintree{srcLanguageSupplyCliCli_suite_testGo, map[string]*bintree{}},
					"main.go": &bintree{srcLanguageSupplyCliMainGo, map[string]*bintree{}},
				}},
				"supply.go": &bintree{srcLanguageSupplySupplyGo, map[string]*bintree{}},
				"supply_suite_test.go": &bintree{srcLanguageSupplySupply_suite_testGo, map[string]*bintree{}},
				"supply_test.go": &bintree{srcLanguageSupplySupply_testGo, map[string]*bintree{}},
			}},
			"vendor": &bintree{nil, map[string]*bintree{
				".gitkeep": &bintree{srcLanguageVendorGitkeep, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

